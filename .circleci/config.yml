version: 2
# Tell CircleCI to use this workflow
workflows:
  version: 2
  default:
    jobs:
      - "python-2.7"
      - "python-3.6"
      - "deploy-pypi":
          requires:
            - "python-2.7"
            - "python-3.6"
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - "deploy-conda":
          requires:
            - "python-2.7"
            - "python-3.6"
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

jobs:
  # Python 2.7 build
  "python-2.7":
    docker:
      - image: continuumio/miniconda:latest

    environment:
      PYTHON: "2.7"
      ENV_NAME: "esmlab-dev"

    steps:
      - checkout

      # Restore cached files to speed things up
      - restore_cache:
          key: deps-{{ .Branch }}-2.7-{{ checksum "ci/environment-dev-2.7.yml" }}

      - run: # install and activate conda environment
          name: configure conda 
          command: ./ci/install-circle.sh

      - run:
          command: |
            source activate ${ENV_NAME}
            pytest --junitxml=test-reports/junit.xml --cov=./

      - save_cache:
          key: deps-{{ .Branch }}-2.7-{{ checksum "ci/environment-dev-2.7.yml" }}
          paths:
            - "/opt/conda/envs/${ENV_NAME}/"

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports

  "python-3.6":
    docker:
      - image: continuumio/miniconda:latest

    environment:
      PYTHON: "3.6"
      ENV_NAME: "esmlab-dev"

    steps:
    
      # Get our data and merge with upstream
      - checkout

      # Restore cached files to speed things up
      - restore_cache:
          key: deps-{{ .Branch }}-3.6-{{ checksum "ci/environment-dev-3.6.yml" }}

      - run: # install and activate conda environment
          name: configure conda 
          command: ./ci/install-circle.sh
      - run:
          command: |
            source activate ${ENV_NAME}
            pytest --junitxml=test-reports/junit.xml --cov=./

      - run:
          name: Code Coverage + Code Styling with (black, flake8, isort)
          command: |
            source activate ${ENV_NAME}

            echo "[Upload coverage]"
            codecov

            echo "[flake8]"
            flake8 

            echo "[black]"
            black --check . 

            echo "[isort]"
            isort --recursive --check-only .
      - run:
          name: Check documentation build 
          command: |
            source activate ${ENV_NAME}
            pushd docs
            make html 
            popd

     
      # Cache some files for a speedup in subsequent builds
      - save_cache:
          key: deps-{{ .Branch }}-3.6-{{ checksum "ci/environment-dev-3.6.yml" }}
          paths:
            - "/opt/conda/envs/${ENV_NAME}/"

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports
      # Tell Circle to store the documentation output in a folder that we can access later
      - store_artifacts: 
          path: docs/_build/html
          destination: html

  "deploy-pypi":
    # This is the base environment that Circle will use
    docker:
      - image: frolvlad/alpine-miniconda3

    steps:
      - run: apk add --no-cache build-base ca-certificates git openssh bash curl

      # Get our data and merge with upstream
      - checkout

      - run: 
          name: Deploy package release to PyPI 
          command: ./ci/install-circleci.sh 3.6 pypi
            
            
     

  "deploy-conda":
    # This is the base environment that Circle will use
    docker:
      - image: frolvlad/alpine-miniconda3

    steps:
      - run: apk add --no-cache build-base ca-certificates git openssh bash curl

      # Get our data and merge with upstream
      - checkout

      - run:
          name: Deploy package release to Anaconda.org
          command: ./ci/install-circleci.sh 3.6 conda 

            